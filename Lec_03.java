// Блок try-with-resources
//  При использовании внешних для JVM ресурсов, таких как файлы,
// сетевые соединения, соединения с базами данных и прочие,
// требуется обязательно закрывать их в блоке finally. Это связано с
// тем, что если приложение аварийно завершит свою работу, JVM сама
// почистит используемую память и освободит все свои служебные
// файлы. Но если ваше приложение получило доступ к сетевым
// соединениям, файлам или соединениям с базами данных, все эти
// ресурсы будут внешними для JVM, и она никак на них не сможет
// повлиять. Поэтому вы обязательно должны их освобождать, иначе всё
// заблокируете.

// Рядом с try в круглых скобках указывается создаваемый ресурс, который
// при выходе из блока try должен быть освобождён, и не важно будет ли
// брошено какое-то исключение или нет. То есть вся работа по написанию
// блока finally выполняется автоматически без нашего участия.

// try-with-resources может использовать только AutoClosable типы

// Посмотрим, как Java определяет, что указанный объект в круглых скобках
// можно закрыть. Там можно указать только объекты, реализующие
// интерфейс AutoClosable. В таком случае для Java есть гарантия
// возможности вызова метода close() у объекта. 

// Обработка исключений выше по стеку
// throws позволяет не обрабатывать checked
// исключение в методе, а пробросить его
// методу, который вызвал наш метод.



import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class Lec_03 {
  public static void main(String args[]) {
    // FileReader reader = null;
    // try {
    //   reader = new FileReader(new File("file.txt"));
    // } catch (IOException e) {
    // e.printStackTrace();
    // } finally {
    //   try {
    //     if (reader != null) {
    //       reader.close() ;  // есть файнали, сами закрываем поток
    //     }
    //   } catch (IOException e) {
    //     e.printStackTrace() ;
    //   }
    // }


    // используем Блок try-with-resources, закрывать поток при таком способе не нужно, закроется сам, блок файнали не нужен
    try (FileReader reader = new FileReader(new File("file.txt"))) {
    } catch (IOException e) {
      e.printStackTrace () ;
    }
  }
}
